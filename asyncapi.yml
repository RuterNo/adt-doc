asyncapi: '2.3.0'
info:
  title: Avtale om digitale tjenester - ADT
  description: |
    ## Ruters digitale plattform
    This specification contains interfaces to be used between PTOs (operators) and Ruter.

    #### More info
    For more information, please go to: [ruterno.github.io](https://ruterno.github.io/)

    #### Comments or suggestions
    Please open an issue here: [ADT-DOC Issues](https://github.com/RuterNo/adt-doc/issues) 

  termsOfService: https://ruter.no
  contact:
    name: RDP Support
    url: https://ruteras.slack.com/archives/CKJ2V79SN
    email: rdp-support@ruter.no
  license:
    name: GPL 3.0
    url: https://ruter.no
  version: 0.0.0
servers:
  mqtt.transhub.io:
    url: mqtt.transhub.io
    protocol: mqtt
    description: Ruters central MQTT broker
    variables:
      port:
        description: The mqtt broker is available through TCP (:8883) and Websockets (:9883)
        default: '8883'
        enum:
          - '8883'
          - '9883'
    security:
      - user-password: []

defaultContentType: application/json
channels:
  'signon/json':
    description: |
      ### Signon Message
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | ruter/{operatorId}/{vehicleId}/itxpt/ota/signon/json  |
      | Schema        | [ signon.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/signon.json) |
      Notify PTA BO that the bus is starting a block.
    publish:
      message:
        name: Signon Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/signon.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/signon.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'signoff/json':
    description: |
      ### signoff Message
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | ruter/{operatorId}/{vehicleId}/itxpt/ota/signoff/json  |
      | Schema        | [ signon.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/signon.json) |
      Notify PTA BO that the bus has completed a block.

      The content of signoff is the same as signon and uses the same schema.
    publish:
      message:
        name: Signoff Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/signon.json'
        bindings:
          mqtt:
            qos: 1
            retain: false
  'avl/json':
    description: |
      ### AVL Message
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | ruter/{operatorId}/{vehicleId}/itxpt/ota/avl/json  |
      | Schema        | [ avl.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/avl.json) |

      Automatic Vehicle Location. Reporting of the bus's position, course and speed to PTA BO.
    publish:
      message:
        name: AVL MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/avl.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/avl.json' }
        ]
        bindings:
          mqtt:
            qos: 0
            retain: false
  'telemetry/{telemetryId}/json':
    description: |
      ### Telemetry data
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | ruter/{operatorId}/{vehicleId}/itxpt/ota/telemetry/{telemetryId}/json  |
      | Schema        | [ avl.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/avl.json) |

      Vehicle telemetry from systems on the bus.

      Several different kinds of telemetry are available varying by vehicle type. For traditional busses, FMS is the standard defines what data about the vehicle is published on the FMS bus and out by FMStoIP. For trams VehicleToIP defines a a different and more limited set of data. In addition, electrical and hydrogen have proprietary data that is not captured by either.

      This topic generalizes all such data as telemetry defined by a unique id. We will use FMS PGN ids (4-digit hex values) but otherwise use unique ids to identify data from other sources.

      If we define the ids along the lines of FMS we can have 32-bit ids that use the following pattern:

      | Bytes | Description                       |
      |-------|-----------------------------------|
      | 1     | Source identifier                 |
      | 2-4   | Source-specific id, e.g. FMS PGNs |

      Source identifiers will be:

      | Id   | Description |
      |------|-------------|
      | 0x00 | FMS         |
      | 0x01 | non-FMS     |
      | ...  | new sources |

      Therefore all FMS PGNs become "0000" + 4-digit hex PGN.

      ?> Learn more about the telemetry concept in [this wiki article](https://ruter.atlassian.net/wiki/spaces/TAAS/pages/106004500/Telemetry+concept).

      #### FMS
      Each of the available data points is defined with a Parameter Group Number (PGN) with fields defined by Suspect Parameter Number (SPN).

      The FMS-to-IP service in the ITxPT standard makes the desired data available on the bus's own network over UDP (multicast broadcast). It sends out only the PGNs previously requested by calling a service. The messages are sent every second, according to ITxPT, and includes all the requested PGNs. The format is in XML.

      We therefore define which PGNs are needed by Ruter and that the XML message should be broken up per PGN and forwarded as JSON.

      #### FMS Parameter Group Number (PGN)
      This is the list of required PGNs. It should be possible to expand this over time.

      | Code | Description                      | PGN  | SPN                                                                       | Purpose               | ID       | Local topic             |
      |------|----------------------------------|------|---------------------------------------------------------------------------|----------------------|----------|-------------------------|
      | DC1  | Door Control 1                   | FE4E | 3411 Status 2 of doors <br> 1820 Ramp/Wheel chairlift <br> 1821 Position of doors   | Doors open / closed  | 0000FE4E | telemetry/0000fe4e/json |
      | DC2  | Door Control 2                   | FDA5 | XXXX Lock Status Door N <br> XXXX Enable Status Door N <br> XXXX Open Status Door N | Alternative to DC1?  | 0000FDA5 | telemetry/0000fda5/json |
      | VDHR | High Resolution Vehicle Distance | FEC1 | 917 High resolution total vehicle distance                                | Supplements position | 0000FEC1 | telemetry/0000fec1/json |
    parameters:
      telemetryId:
        $ref: '#/components/parameters/telemetryId'
    publish:
      message:
        name: FMS-to-IP data
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/telemetry.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/telemetry.json' }
        ]
        bindings:
          mqtt:
            qos: 0
            retain: false

  'stopsignal/json':
    description: |
      ### Stop signal status:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | ruter/{operatorId}/{vehicleId}/itxpt/ota/stopsignal/json  |
      | Schema        | [ stopsignal.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/stopsignal.json) |

      This message should be produced whenever the stop signal is turned on or off.
    publish:
      message:
        name: Stop signalled MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/stopsignal.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/stopsignal.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'pe/dpi_diagnostics':
    description: |
      ### DPI Diagnostics message:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/pe/dpi_diagnostics  |
      | Schema        | [ diagnostics.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/diagnostics.json) |

      Report to PTA BO about a screen.

      The DPI application itself produces diagnostic messages.
      The payload is defined as an object with no pre-defined structure to provide flexibility.
    publish:
      message:
        name: DPI Diagnostics message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/diagnostics.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/diagnostics.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false

  'infohub/sales/diagnostics/json':
    description: |
      ### RuterSalg diagnostics
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | ruter/{operatorId}/{vehicleId}/itxpt/ota/sales/diagnostics/json  |
      | Schema        | [ salediagnostics.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/salediagnostics.json)                                                             |

      Diagnostics message generated by RuterSalg. More details about fields can be found at https://ruter.atlassian.net/wiki/spaces/TAAS/pages/948928517/OTA+MQTT-Meldinger+benyttet+av+Ruter+Salg.

      This topic is intended for applications interested in health status for the RuterSalg application on each bus. The health status is intended both as a real time surveillance of health status for each individual bus as well as for aggregating data per operator to see larger, more general issues. The topic can also, when enriched by other data, determine whether or not RuterSalg was used and working on a specific departure.
    publish:
      message:
        name: RuterSalg Diagnostics MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/salediagnostics.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/salediagnostics.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'infohub/sales/saleresult/json':
    description: |
      ### Saleresult Message
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | ruter/{operatorId}/{vehicleId}/itxpt/ota/sales/saleresult/json |
      | Schema        | [ saleresult.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/saleresult.json) |

      Sale result message generated by RuterSalg. More details about fields can be found at https://ruterwiki.ruter.no/display/PNS/MQTT+Topics+consumed+and+produced+by+RuterSalg.

      This topic is intended as a live view of sales, and must not be used as the complete truth. This is done elsewhere. This topic is intended for health surveillance, for anyone interesting in whether or not tickets are being sold, and also how many and what kind of tickets.

      Some operators have suggested that they might be interested in using this topic to display sales results on screens separate from the RuterSalg application, intended as information to the travelers purchasing tickets. This topic is well suited for this use case.
    publish:
      message:
        name: Saleresult MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/saleresult.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/saleresult.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'infohub/sales/validationresult/json':
    description: |
      ### Validationresult Message
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | ruter/{operatorId}/{vehicleId}/itxpt/ota/sales/validationresult/json  |
      | Schema        | [ validationresult.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/validationresult.json) |

      Validation result message generated by RuterSalg. This topic is intended as a live view of validation. This topic is intended for health surveillance, for anyone interesting in whether or not validations are being performed, as well as validation results.

    publish:
      message:
        name: Validationresult MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/validationresult.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/validationresult.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false

  'pe/dpi/journey':
    description: |
      ### Journey message:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/pe/dpi/journey  |
      | Schema        | [ journey.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/journey.json) |
      
      Message containing the stops included in the journey, connections to other lines, positions ++.
    subscribe:
      externalDocs:
        description: https://ruterno.github.io
        url: https://ruterno.github.io/#/docs/ota?id=vehicle-journey
      message:
        name: Journey Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/journey.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/journey.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: true
  'pe/dpi/nextstop':
    description: |
      ### Next Stop message:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/pe/dpi/nextstop  |
      | Schema        | [ nextstop.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/nextstop.json) |
      
      Next stop on the bus's route after leaving a stop.
    subscribe:
      message:
        name: Next Stop MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/nextstop.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/nextstop.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'pe/dpi/eta':
    description: |
      ### ETA message:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/pe/dpi/eta  |
      | Schema        | [ eta.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/eta.json) |
      
      Estimated arrival at the remaining stops.
    subscribe:
      message:
        name: ETA MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/eta.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/nextstop.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'pe/dpi/externaldisplay':
    description: |
      ### External Display message:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/pe/dpi/externaldisplay  |
      | Schema        | [ externaldisplay.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/externaldisplay.json) |
      
      Message to be shown on the external destination display. Usually line number (publicCode) and routeName, with support for alternative message.      

    subscribe:
      message:
        name: External Display MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/externaldisplay.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/externaldisplay.json' },
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/externaldisplay_deadrun.json' }

        ]
        bindings:
          mqtt:
            qos: 1
            retain: true
  'pe/dpi/arriving':
    description: |
      ### Arriving message:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/pe/dpi/arriving  |
      | Schema        | [ arriving.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/arriving.json) |
      
      Notice to passengers that the bus is approaching a stop.      

    subscribe:
      message:
        name: Arriving Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/arriving.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/arriving.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'pe/dpi/deviation':
    description: |
      ### Deviation message:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/pe/dpi/deviation  |
      | Schema        | [ deviation.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/deviation.json) |
      
      Notice to passengers that the bus is approaching a stop.      

    subscribe:
      message:
        name: Deviation MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/deviation.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/deviation.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'pe/dpi/announcement':
    description: |
      ### Announcement message:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/pe/dpi/announcement  |
      | Schema        | [ announcement.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/announcement.json) |
      Announcement to the passengers (ad hoc). Message contains a reference to the scope of the message, if applicable. Typically NSR stopplaceid / lineId or similar.      
          ⚠️ Deprecated! No longer in use.
    subscribe:
      message:
        tags:
          - name: Deprecated
            description: This message will be removed in a later release.
        name: Announcement MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/announcement.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/announcement.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'pe/dpi/c2':
    description: |
      ### C2 message:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/pe/dpi/c2  |
      | Schema        | [ c2.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/c2.json) |
      
      Command and control messages from Ruter Data Platform.
      
      The c2 channels is reserved for command and control messages originated by Ruter. Typical use cases include:
      
      - Diagnostics / debugging
        - Trigger transfer of debug information
        - Trigger screenshot of DPI screen
        - Trigger clearing of cache and refresh of webpage
      - Content
        - Trigger display of campaign
      
      The payload is defined as an object with no structure to provide flexibility.

    subscribe:
      message:
        name: C2 MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/c2.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/c2.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'pe/dpi/connections':
    description: |
      ### Connections message:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/pe/dpi/connections  |
      | Schema        | [ connections.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/connections.json) |
      
      List of connections for the remaining stops on a journey with expected departures.

    subscribe:
      message:
        name: The Connections Schema
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/connections.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/connections.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'tsp/json':
    description: |
      ### Traffic Preemption MQTT Message
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/itxpt/ota/tsp/json |
      | Schema        | [ tsp.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/tsp.json) |
      
      The message to be sent to VHF to ensure that the bus is prioritized at the traffic lights. This message is generated by Ruter when approaching an intersection or, when a stop is just before an intersection, after the doors have closed.

    subscribe:
      message:
        name: Traffic Preemption MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/tsp.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/tsp.json' }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'infohub/dpi/audio/json':
    description: |
      ### Audio message:
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/itxpt/ota/dpi/audio/json  |
      | Schema        | [ audio.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/audio.json) |
      
      Topic used exclusively to transmit audio messages to be played by the speaker system. The audio messages may contain an array of sound bites, that are to be played in the sequence they have been received. 

    subscribe:
      message:
        name: Audio MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/audio.json'
        examples: [
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/audio.json' },
          { '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/audio_local.json' },
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
  'infohub/madt/notification/json':
    description: |
      ### MADT Notification
      | Field         | Value                                                                            |
      |---------------|----------------------------------------------------------------------------------|
      | Central Topic | {operatorId}/ruter/{vehicleId}/itxpt/ota/madt/notification/json   |
      | Schema        | [ notification.json ](https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/notification.json) |
      
      Notification message sent to the MADT (Multi-Application Driver Terminal) device inside the bus. To be used to inform the bus driver from the Ruter backoffice.
      The text message may contain the "Line Feed" character (\n), indicating line breaks.

    subscribe:
      message:
        name: Notification MQTT Message
        schemaFormat: application/schema+json;version=draft-07
        payload:
          $ref: 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/json-schemas/notification.json'
        examples: [
          {
            '$ref': 'https://raw.githubusercontent.com/RuterNo/adt-doc/adt1/examples/notification.json'
          }
        ]
        bindings:
          mqtt:
            qos: 1
            retain: false
components:
  parameters:
    operatorId:
      description: The ID of the operator
      schema:
        type: string
    vehicleId:
      description: The vehicle ID.
      schema:
        type: string
    telemetryId:
      description: The telemetry / sensor ID.
      schema:
        type: string
  securitySchemes:
    user-password:
      type: userPassword
      description: Please reach out to rdp-support@ruter.no to request access.
